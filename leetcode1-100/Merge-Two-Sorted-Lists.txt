//??
class Solution {

    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        ListNode head = new ListNode(-1);
        ListNode l3 = head;
        
        if(l1==null&&l2==null)
            return null;
        
        if(l1==null){
            return l2;
        }
            
        if(l2==null){
            return l1;
        }
            
        if(l1.val>=l2.val){
            l3=l2;
            l3.next=mergeTwoLists(l1,l2.next);
        }else{
            l3.val=l1.val;
            l3.next=mergeTwoLists(l1.next,l2);
        }
        return l3;
    }
}

//???

class Solution {

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        
         if(list1==null){
            return list2;
        }else if(list2==null){
            return list1;
        }
        ListNode head = new ListNode(-1);
        ListNode newlist = head;
        while(list1!=null&&list2!=null){
            if(list1.val<=list2.val){
                newlist.next=list1;
                newlist = newlist.next;
                list1=list1.next;
            }else{
                newlist.next=list2;
                newlist = newlist.next;
                list2=list2.next;
            }
        }
        
            while(list2!=null){
                newlist.next = list2;
                newlist = newlist.next;
                list2=list2.next;
            }
       
            while(list1!=null){
                newlist.next = list1;
                newlist = newlist.next;
                list1=list1.next;
            }
        
        return head.next;
    }
}